/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyMina.vista.interfaces;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.json.JSONObject;
import proyMina.modelo.DisableSSLVerification;
import proyMina.modelo.clsConnection;
import proyMina.modelo.clsFunciones;
import proyMina.modelo.clsGlobales;
import proyMina.modelo.clsOperacionesUsuarios;
import sun.misc.BASE64Decoder;

/**
 *
 * @author josue
 */
public class RecetaFarmacia extends javax.swing.JFrame {
    Date dateHoy = new Date();
    SimpleDateFormat formato = new SimpleDateFormat("yyyy/MM/dd");
    clsConnection oConn = new clsConnection();
    clsFunciones oFunc = new clsFunciones();
    clsOperacionesUsuarios oPe = new clsOperacionesUsuarios();
        DefaultTableModel model; 
    int dni=0;
    int dias=0, horas=0, cantidad=0, primaria=0,id_farmacia=0;
    String id_receta_medica="";
         String base64String="";
    boolean validador=true;
    /**
     * Creates new form RecetaFarmacia
     */
    public RecetaFarmacia() {
        initComponents();
        setLocationRelativeTo(null);  
        AutoCompleteDecorator.decorate(cboMedicamento1);
        primaria=idDiagnosticoPorEspecialidad();
        jButtonUpdate.setEnabled(false);
        btnRegistrar.setEnabled(true);
        cargarMedicamentos();
        jTextFieldDiagnostico.setEnabled(false);
        jTextFieldDiagnostico.setText(clsGlobales.descripcionDiagnostico);
        jTextFieldCodigoDiag.setEnabled(false);
        jTextFieldCodigoDiag.setText(clsGlobales.codigoDiagnostico);
        llenar_tabla_recetaFarmacia();
         calcularDniUser();
        popuptable();
        
        txtImp.setText(clsGlobales.historiaClinica.toString());
    }
       public void popuptable(){
    JPopupMenu popupMenu=new JPopupMenu();
    JMenuItem menuItem1=new JMenuItem("Editar Registro");

    menuItem1.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent ae) {
     int a =jTable1.getSelectedRow();
     id_receta_medica=jTable1.getValueAt(a,0).toString();
           editarRegistro(id_receta_medica);
             //  JOptionPane.showMessageDialog(null, "Registro Eliminado");
        }
    
    });   
    

    popupMenu.add(menuItem1);   

    jTable1.setComponentPopupMenu(popupMenu);
  
    }  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cboMedicamento1 = new javax.swing.JComboBox();
        jTextFieldCantidad1 = new javax.swing.JTextField();
        jTextFieldHorario1 = new javax.swing.JTextField();
        jTextFieldFrecuencia1 = new javax.swing.JTextField();
        jTextFieldObserv1 = new javax.swing.JTextField();
        jTextFieldDiagnostico = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnRegistrar = new javax.swing.JButton();
        btnLimpiarCancelarTriaje = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextFieldCodigoDiag = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        btnImprimir = new javax.swing.JButton();
        txtImp = new javax.swing.JTextField();
        jButtonUpdate = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cboMedicamento1.setEditable(true);
        cboMedicamento1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N/A" }));
        cboMedicamento1.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cboMedicamento1PopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cboMedicamento1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboMedicamento1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cboMedicamento1MouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cboMedicamento1MousePressed(evt);
            }
        });
        cboMedicamento1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboMedicamento1ActionPerformed(evt);
            }
        });
        cboMedicamento1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cboMedicamento1KeyPressed(evt);
            }
        });
        getContentPane().add(cboMedicamento1, new org.netbeans.lib.awtextra.AbsoluteConstraints(147, 55, 377, -1));

        jTextFieldCantidad1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCantidad1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldCantidad1, new org.netbeans.lib.awtextra.AbsoluteConstraints(145, 155, 39, -1));

        jTextFieldHorario1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldHorario1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldHorario1, new org.netbeans.lib.awtextra.AbsoluteConstraints(147, 83, 33, -1));

        jTextFieldFrecuencia1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldFrecuencia1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldFrecuencia1, new org.netbeans.lib.awtextra.AbsoluteConstraints(147, 121, 33, -1));

        jTextFieldObserv1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldObserv1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldObserv1, new org.netbeans.lib.awtextra.AbsoluteConstraints(301, 155, 276, -1));
        getContentPane().add(jTextFieldDiagnostico, new org.netbeans.lib.awtextra.AbsoluteConstraints(147, 21, 377, -1));

        jLabel1.setText("Diagnostico:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 24, -1, -1));

        jLabel2.setText("Medicamento:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 58, -1, -1));

        jLabel3.setText("Horas:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 86, -1, -1));

        jLabel4.setText("Fecuencia:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 124, -1, -1));

        jLabel5.setText("Cantidad total:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 158, -1, -1));

        jLabel6.setText("Instruccion:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(221, 158, -1, -1));

        btnRegistrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/add.png"))); // NOI18N
        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });
        getContentPane().add(btnRegistrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 195, -1, -1));

        btnLimpiarCancelarTriaje.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar.png"))); // NOI18N
        btnLimpiarCancelarTriaje.setText("Limpiar/Cancelar");
        btnLimpiarCancelarTriaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarCancelarTriajeActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiarCancelarTriaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(301, 195, 153, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 255, 593, 325));
        getContentPane().add(jTextFieldCodigoDiag, new org.netbeans.lib.awtextra.AbsoluteConstraints(559, 21, 79, -1));

        jLabel7.setText("h");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 86, -1, -1));

        jLabel8.setText("dias");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 124, 39, -1));

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Imprimir"));

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/impresora.png"))); // NOI18N
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        txtImp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtImpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(txtImp, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtImp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );

        getContentPane().add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(472, 195, -1, -1));

        jButtonUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/actualizar.png"))); // NOI18N
        jButtonUpdate.setText("Actualizar");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 195, -1, -1));

        jLabel9.setBackground(new java.awt.Color(204, 255, 255));
        jLabel9.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(351, 83, 226, 32));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboMedicamento1PopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cboMedicamento1PopupMenuWillBecomeInvisible
        // TODO add your handling code here:
    }//GEN-LAST:event_cboMedicamento1PopupMenuWillBecomeInvisible

    private void cboMedicamento1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboMedicamento1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cboMedicamento1MouseClicked

    private void cboMedicamento1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboMedicamento1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_cboMedicamento1MouseEntered

    private void cboMedicamento1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboMedicamento1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboMedicamento1MousePressed

    private void cboMedicamento1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMedicamento1ActionPerformed
        cargarStock();
    }//GEN-LAST:event_cboMedicamento1ActionPerformed

    private void cboMedicamento1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cboMedicamento1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboMedicamento1KeyPressed

    private void jTextFieldHorario1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldHorario1ActionPerformed
        horas=Integer.valueOf(jTextFieldHorario1.getText().toString().trim());
        jTextFieldFrecuencia1.requestFocus();
    }//GEN-LAST:event_jTextFieldHorario1ActionPerformed

    private void jTextFieldFrecuencia1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldFrecuencia1ActionPerformed
        dias=Integer.valueOf(jTextFieldFrecuencia1.getText().toString().trim());
        cantidad=(dias*24)/horas;
        jTextFieldCantidad1.setText(""+cantidad);
        jTextFieldCantidad1.requestFocus();
    }//GEN-LAST:event_jTextFieldFrecuencia1ActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        id_farmacia=idInventarioFarmacia();
        if(validador){
        registrarRecetaFarmacia();
        limpiar();
        }
        
        
        
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnLimpiarCancelarTriajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarCancelarTriajeActionPerformed
        limpiar();
    }//GEN-LAST:event_btnLimpiarCancelarTriajeActionPerformed

    private void jTextFieldCantidad1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCantidad1ActionPerformed
        System.out.println(primaria);
        jTextFieldObserv1.requestFocus();
    }//GEN-LAST:event_jTextFieldCantidad1ActionPerformed

    private void txtImpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtImpActionPerformed
        int seleccion = JOptionPane.showOptionDialog(
    this, // Componente padre
    "¿Desea Imprimir ?", //Mensaje
    "Seleccione una opción", // Título
    JOptionPane.YES_NO_CANCEL_OPTION,
    JOptionPane.QUESTION_MESSAGE,
    null,    // null para icono por defecto.
    new Object[] { "Si", "No"},    // null para YES, NO y CANCEL
    "Si");
    if (seleccion != -1)
    {
   if((seleccion + 1)==1)
   {
       try {
           print(txtImp.getText().toString());
       } catch (Exception ex) {
           Logger.getLogger(RecetaFarmacia.class.getName()).log(Level.SEVERE, null, ex);
       }
       
   }
   else
   {
      // PRESIONO NO
   }
  }   
        
    }//GEN-LAST:event_txtImpActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        int seleccion = JOptionPane.showOptionDialog(
    this, // Componente padre
    "¿Desea Imprimir ?", //Mensaje
    "Seleccione una opción", // Título
    JOptionPane.YES_NO_CANCEL_OPTION,
    JOptionPane.QUESTION_MESSAGE,
    null,    // null para icono por defecto.
    new Object[] { "Si", "No"},    // null para YES, NO y CANCEL
    "Si");
    if (seleccion != -1)
    {
   if((seleccion + 1)==1)
   {
       try {
           print(txtImp.getText().toString());
       } catch (Exception ex) {
           Logger.getLogger(RecetaFarmacia.class.getName()).log(Level.SEVERE, null, ex);
       }
       
   }
   else
   {
      // PRESIONO NO
   }
  }
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        actualizarRecetaFarmacia();
        limpiar();
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jTextFieldObserv1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldObserv1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldObserv1ActionPerformed
                private void cargarMedicamentos(){
            try {
                String sQuery;
                // Prepara el Query
                sQuery ="select nombre_producto from desktop_farmacia_inventario order by nombre_producto;";
                System.out.println(sQuery);
                if (oConn.FnBoolQueryExecute(sQuery))
                {
                    try
                    {
                        // Verifica resultados
                        while (oConn.setResult.next())
                        {
        
                                cboMedicamento1.addItem(oConn.setResult.getString ("nombre_producto"));

                           
                        }
                        
                        // Cierra Resultados
                        oConn.setResult.close();
                    }
                    catch (SQLException ex)
                    {
                        //JOptionPane.showMessageDialorootPane,ex);
                        oFunc.SubSistemaMensajeInformacion(ex.toString());
                        Logger.getLogger(RecetaFarmacia.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                // selecciona
                    cboMedicamento1.setSelectedIndex(0);
      
                oConn.sqlStmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(RecetaFarmacia.class.getName()).log(Level.SEVERE, null, ex);
            }
}
                
                
                                private void cargarStock(){
            try {
                String sQuery="";
                // Prepara el Query
                if(cboMedicamento1.getSelectedIndex()>0)
                {
                sQuery ="select \n" +
"	(dskt_fminv.cantidad - \n" +
"	(case when (select SUM(cantidad_total_recetado) from desktop_medicamento_x_expecialidad_hc as dme where dme.id_farmacia=dskt_fminv.id_farmacia ) is null \n" +
"	then 0 else \n" +
"	(select SUM(cantidad_total_recetado) from desktop_medicamento_x_expecialidad_hc as dme where dme.id_farmacia=dskt_fminv.id_farmacia ) end  )	) as restante\n" +
"	from desktop_farmacia_inventario as dskt_fminv WHERE nombre_producto= '"+cboMedicamento1.getSelectedItem().toString().trim()+"';";
                }
                System.out.println(sQuery);
                if (oConn.FnBoolQueryExecute(sQuery))
                {
                    try
                    {
                        // Verifica resultados
                        while (oConn.setResult.next())
                        {
        
                               jLabel9.setText("STOCK: "+ oConn.setResult.getString ("restante"));

                           
                        }
                        
                        // Cierra Resultados
                        oConn.setResult.close();
                    }
                    catch (SQLException ex)
                    {
                        //JOptionPane.showMessageDialorootPane,ex);
                        oFunc.SubSistemaMensajeInformacion(ex.toString());
                        Logger.getLogger(RecetaFarmacia.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                // selecciona
      
                oConn.sqlStmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(RecetaFarmacia.class.getName()).log(Level.SEVERE, null, ex);
            }
}
                
                   
                
                                private void editarRegistro(String id){
            try {
                String sQuery;
                // Prepara el Query
                sQuery ="select id_medicamento_diag,cantidad_total_recetado,horas,frecuencia_dias, recomendacion,dfi.nombre_producto from desktop_medicamento_x_expecialidad_hc \n" +
"	as dmxe inner join desktop_farmacia_inventario as dfi on dmxe.id_farmacia=dfi.id_farmacia where dmxe.id_medicamento_diag="+id;
                System.out.println(sQuery);
                if (oConn.FnBoolQueryExecute(sQuery))
                {
                    try
                    {
                        // Verifica resultados
                        while (oConn.setResult.next())
                        {
                                jTextFieldHorario1.setText(oConn.setResult.getString ("horas"));
                                jTextFieldFrecuencia1.setText(oConn.setResult.getString ("frecuencia_dias"));
                                jTextFieldCantidad1.setText(oConn.setResult.getString ("cantidad_total_recetado"));
                                jTextFieldObserv1.setText(oConn.setResult.getString ("recomendacion"));
                                cboMedicamento1.setSelectedItem(oConn.setResult.getString ("nombre_producto"));
                                jButtonUpdate.setEnabled(true);
                                btnRegistrar.setEnabled(false);
                           
                        }
                        
                        // Cierra Resultados
                        oConn.setResult.close();
                    }
                    catch (SQLException ex)
                    {
                        //JOptionPane.showMessageDialorootPane,ex);
                        oFunc.SubSistemaMensajeInformacion(ex.toString());
                        Logger.getLogger(RecetaFarmacia.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                // selecciona
                    //cboMedicamento1.setSelectedIndex(0);
      
                oConn.sqlStmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(RecetaFarmacia.class.getName()).log(Level.SEVERE, null, ex);
            }
}
                
                   public int idDiagnosticoPorEspecialidad()
    {
        // Para devolver el resultado
        
        // Para el Query
        String sQuery="";
        int respuesta=0;
        // Prepara el Query
        
        sQuery  = "select id_diag_x_espe_hc from desktop_diagnostico_x_expecialidad_hc where n_orden="+clsGlobales.historiaClinica+" and tipo='"+clsGlobales.tipoEspecialidad+"'"+
        " AND codigo_cie10='"+clsGlobales.codigoDiagnostico+"'";
        System.out.println(sQuery);
   
        //Ejecuta el Query
        oConn.FnBoolQueryExecute(sQuery);
        
        // Capturo el Error
        try {
            
            // Verifico que haya habido resultados
            if (oConn.setResult.next())
            {
                
               respuesta=oConn.setResult.getInt("id_diag_x_espe_hc");

            }
            
            // Cierro los Resultados
            oConn.sqlStmt.close();
            
        } catch (SQLException ex) {
         
        }
        
        
        
        // Retorna el Resultado
        return respuesta;
    }             
          public void calcularDniUser()
    {
        // Para devolver el resultado
        
        // Para el Query
        String sQuery="";
        
        // Prepara el Query
        sQuery  = "select dni from desktop_empleado where name_user='"+clsGlobales.sUser+"'";
        
   
        //Ejecuta el Query
        oConn.FnBoolQueryExecute(sQuery);
        
        // Capturo el Error
        try {
            
            // Verifico que haya habido resultados
            if (oConn.setResult.next())
            {
                
               dni= oConn.setResult.getInt("dni");
                // Resultado
//             oFunc.SubSistemaMensajeError("Número de Orden Utilizado");
//             txtNumero.setText(null);
//             txtNumero.requestFocus();
            }
            
            // Cierro los Resultados
            oConn.sqlStmt.close();
            
        } catch (SQLException ex) {
         
        }
        
        
        
        // Retorna el Resultado
        
    }
     
              public void consumirApiSello() throws Exception {
      SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy"); 
         try {
            DisableSSLVerification.disableSSL();  
            URL url = new URL("https://hmintegracion.azurewebsites.net/api/v01/st/registros/detalleArchivoEmpleado/"+dni+"/FIRMA");
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("GET");
            con.setRequestProperty("Content-Type", "application/json; utf-8");
            con.setRequestProperty("Accept", "application/json");
            con.setDoOutput(true);


            int code = con.getResponseCode();
            System.out.println("Response Code: " + code);
           if(code!=500){
            try (BufferedReader br = new BufferedReader(
                    new InputStreamReader(con.getInputStream(), "utf-8"))) {
                StringBuilder response = new StringBuilder();
                String responseLine;
                while ((responseLine = br.readLine()) != null) {
                System.out.println("Response line: " + responseLine.trim());
                    response.append(responseLine.trim());
                }
                  System.out.println("Response: " + response.toString());
                     JSONObject objectJson = new JSONObject(response.toString());
                  System.out.println("Response: " + objectJson);
                  System.out.println("Response: " + objectJson.getString("base64"));
                     
         
                     base64String=(objectJson.getString("base64"));
                 


                    /*
                    System.out.println("el campo es:"+objectJson.getLong("id_resp"));
                    
                    System.out.println("el campo es:"+objectJson.getString("rucEmpresa"));
                    System.out.println("el campo es:"+objectJson.getString("rucContrata"));
                    System.out.println("el campo es:"+objectJson.getString("cargo"));
                    System.out.println("el campo es:"+objectJson.getString("area"));
                    System.out.println("el campo es:"+objectJson.getString("tipoExamen"));
                    System.out.println("el campo es:"+objectJson.getString("fechaReserva"));
                      */
            }
            
            
            }
            else
                        base64String="OTROJASPER";
             

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(e);
        }
    }
                 
          private void print(String norden) throws Exception{
                consumirApiSello();
                String direccionReporte ="";
                Map parameters = new HashMap(); 
              parameters.put("Norden",Integer.valueOf(norden));          
              //  InputStream targetStream = IOUtils.toInputStream(base64String);  
              //
              if(!base64String.contains("OTROJASPER"))
              {
                BufferedImage image = null;
                byte[] imageByte;

                BASE64Decoder decoder = new BASE64Decoder();
                    imageByte = decoder.decodeBuffer(base64String);
                ByteArrayInputStream bis = new ByteArrayInputStream(imageByte);
                image = ImageIO.read(bis);
                bis.close();
                
                
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(image, "png", baos); 
                InputStream stream = new ByteArrayInputStream(baos.toByteArray());
                
                
                parameters.put("Firma",stream);             
              }
                parameters.put("tipo",clsGlobales.tipoEspecialidad);             

                System.out.println("los parametros son: "+parameters);
                  try 
                {                    
                    if(!base64String.contains("OTROJASPER"))
                    direccionReporte = System.getProperty("user.dir")+File.separator+"reportes"+File.separator+"RECETA_M.jasper";
                    else
                    direccionReporte = System.getProperty("user.dir")+File.separator+"reportes"+File.separator+"RECETA_M__sinfirma.jasper";
                       
                    JasperReport myReport = (JasperReport) JRLoader.loadObjectFromFile(direccionReporte);
                    JasperPrint myPrint = JasperFillManager.fillReport(myReport,parameters,clsConnection.oConnection);
                    JasperViewer viewer = new JasperViewer(myPrint, false);
                    viewer.setTitle("RECETARIO");
                   // viewer.setAlwaysOnTop(true);
                    viewer.setVisible(true);
                 } catch (JRException ex) {
                    Logger.getLogger(FichaTriaje.class.getName()).log(Level.SEVERE, null, ex);
                }
 } 
        
                   
                        public int idInventarioFarmacia()
    {
        // Para devolver el resultado
        
        // Para el Query
        String sQuery="";
        int respuesta=0;
        // Prepara el Query
        
        sQuery  = "select id_farmacia from desktop_farmacia_inventario where nombre_producto='"+cboMedicamento1.getSelectedItem().toString().trim()+"'";
        System.out.println(sQuery);
   
        //Ejecuta el Query
        oConn.FnBoolQueryExecute(sQuery);
        
        // Capturo el Error
        try {
            
            // Verifico que haya habido resultados
            if (oConn.setResult.next())
            {
                
               respuesta=oConn.setResult.getInt("id_farmacia");

            }
            
            // Cierro los Resultados
            oConn.sqlStmt.close();
            
        } catch (SQLException ex) {
         
        }
        
        
        
        // Retorna el Resultado
        return respuesta;
    }                  
           
    
    private void registrarRecetaFarmacia(){
                String strSqlStmt;
            String Query ;
            int key= oFunc.contadorPrimario("desktop_medicamento_x_expecialidad_hc");

            strSqlStmt="INSERT INTO desktop_medicamento_x_expecialidad_hc (";
            Query="Values(";
            strSqlStmt += "id_medicamento_diag";Query +=key;
            strSqlStmt += ",id_diag_x_espe_hc";Query += ","+primaria;
            strSqlStmt += ",id_farmacia";Query += ","+id_farmacia;    
            strSqlStmt += ",horas";Query += ","+Integer.valueOf(jTextFieldHorario1.getText().toString().trim());    
            strSqlStmt += ",frecuencia_dias";Query += ","+Integer.valueOf(jTextFieldFrecuencia1.getText().toString().trim());    
            strSqlStmt += ",cantidad_total_recetado";Query += ","+Integer.valueOf(jTextFieldCantidad1.getText().toString().trim());    
            strSqlStmt += ",recomendacion";Query += ",'"+jTextFieldObserv1.getText().toString().trim()+"'";    
            
            strSqlStmt += ",user_registro";Query += ",'"+clsGlobales.sUser+ "'";
            strSqlStmt += ",fecha_registro";Query += ",'"+formato.format(dateHoy)+ "'";
            System.out.println("el comando es: " + strSqlStmt.concat(") ") + Query.concat(")")); 
            if (oConn.FnBoolQueryExecuteUpdate(strSqlStmt.concat(") ") + Query.concat(")"))){
     
                oFunc.SubSistemaMensajeInformacion("Se ha registrado con Éxito");
                llenar_tabla_recetaFarmacia();
            } else{
                    oFunc.SubSistemaMensajeError("No se pudo registrar La Entrada");
                    
                    }  
    }
    
    private void llenar_tabla_recetaFarmacia(){
               
            try {
                model = new DefaultTableModel(){
                    @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return false;
                    }};
                String vSql="select dmxe.id_medicamento_diag,dfi.nombre_producto,dcie.descripcion from desktop_medicamento_x_expecialidad_hc as dmxe \n" +
"		inner join desktop_farmacia_inventario as dfi on dmxe.id_farmacia=dfi.id_farmacia\n" +
"		inner join desktop_diagnostico_x_expecialidad_hc as ddxe on ddxe.id_diag_x_espe_hc=dmxe.id_diag_x_espe_hc\n" +
"		inner join desktop_cie10 as dcie on  ddxe.codigo_cie10=dcie.codigo\n" +
"		inner join desktop_historia_clinica_detalle as dhcd on ddxe.n_orden=dhcd.n_orden\n" +
"		WHERE ddxe.n_orden="+clsGlobales.historiaClinica+" and dhcd.tipo='"+clsGlobales.tipoEspecialidad+"' and ddxe.codigo_cie10='" +jTextFieldCodigoDiag.getText().toString().trim()+"'"+
"		order by dmxe.id_medicamento_diag desc";
                System.out.println(vSql);
                if (oConn.FnBoolQueryExecute(vSql))
                {
                    try  {
                        java.sql.ResultSetMetaData rsmt = oConn.setResult.getMetaData();
                        int CantidaColumnas = rsmt.getColumnCount();
                        for (int i = 1; i <= CantidaColumnas; i++) {
                            model.addColumn(rsmt.getColumnLabel(i));
                        }
                        while (oConn.setResult.next())
                        {
                            Object [] Fila = new Object[CantidaColumnas];
                            for (int i = 0; i < CantidaColumnas; i++) {
                                Fila[i] = oConn.setResult.getObject(i+1);
                            }
                            model.addRow(Fila);
                        }
                        jTable1.setModel(model);
                        oConn.setResult.close();
                    }
                    catch (SQLException ex)
                    {
                        oFunc.SubSistemaMensajeError(ex.toString());
                        Logger.getLogger(RecetaFarmacia.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                oConn.sqlStmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(RecetaFarmacia.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
  
    private void limpiar(){
    jTextFieldHorario1.setText("");
    jTextFieldFrecuencia1.setText("");
    jTextFieldCantidad1.setText("");
    jTextFieldObserv1.setText("");
    cboMedicamento1.setSelectedItem("N/A");
    jButtonUpdate.setEnabled(false);
    btnRegistrar.setEnabled(true);
    jLabel9.setText("");
    }                 
      
    private void actualizarRecetaFarmacia(){
                id_farmacia=idInventarioFarmacia();

            String strSqlStmt;
            strSqlStmt="update desktop_medicamento_x_expecialidad_hc set id_farmacia="+ id_farmacia+",horas="+
                    jTextFieldHorario1.getText().trim()+",frecuencia_dias="+jTextFieldFrecuencia1.getText().trim()+",cantidad_total_recetado="+jTextFieldCantidad1.getText().trim()
                    +",fecha_actualizacion='"+formato.format(dateHoy)
                    +"',user_actualizacion='"+clsGlobales.sUser+"' "
                    +",recomendacion='"+jTextFieldObserv1.getText().toString().trim()+"' "               
                    +"where id_medicamento_diag="+id_receta_medica;
            System.out.println(strSqlStmt);
            if (oConn.FnBoolQueryExecuteUpdate(strSqlStmt)){
               oFunc.SubSistemaMensajeInformacion("Se ha actualizado con Éxito");
            }else{
                 oFunc.SubSistemaMensajeError("Error en registro");
                 }            
    
}
                        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecetaFarmacia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecetaFarmacia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecetaFarmacia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecetaFarmacia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RecetaFarmacia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnLimpiarCancelarTriaje;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox cboMedicamento1;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldCantidad1;
    private javax.swing.JTextField jTextFieldCodigoDiag;
    private javax.swing.JTextField jTextFieldDiagnostico;
    private javax.swing.JTextField jTextFieldFrecuencia1;
    private javax.swing.JTextField jTextFieldHorario1;
    private javax.swing.JTextField jTextFieldObserv1;
    private javax.swing.JTextField txtImp;
    // End of variables declaration//GEN-END:variables
}
